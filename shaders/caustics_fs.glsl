#version 300 es
precision highp float; in vec3 vVertexPosition; in vec2 vTextureCoord;uniform sampler2D uTexture; uniform float uTime;uniform vec2 uMousePos; uniform vec2 uResolution;vec4 permute(vec4 t) { return t * (t * 34.0 + 133.0); }vec3 grad(float hash) { vec3 cube = mod(floor(hash / vec3(1.0, 2.0, 4.0)), 2.0) * 2.0 - 1.0; vec3 cuboct = cube;float index0 = step(0.0, 1.0 - floor(hash / 16.0)); float index1 = step(0.0, floor(hash / 16.0) - 1.0);cuboct.x *= 1.0 - index0; cuboct.y *= 1.0 - index1; cuboct.z *= 1.0 - (1.0 - index0 - index1);float type = mod(floor(hash / 8.0), 2.0); vec3 rhomb = (1.0 - type) * cube + type * (cuboct + cross(cube, cuboct));vec3 grad = cuboct * 1.22474487139 + rhomb;grad *= (1.0 - 0.042942436724648037 * type) * 3.5946317686139184;return grad; } vec4 bccNoiseDerivativesPart(vec3 X) { vec3 b = floor(X); vec4 i4 = vec4(X - b, 2.5); vec3 v1 = b + floor(dot(i4, vec4(.25))); vec3 v2 = b + vec3(1, 0, 0) + vec3(-1, 1, 1) * floor(dot(i4, vec4(-.25, .25, .25, .35))); vec3 v3 = b + vec3(0, 1, 0) + vec3(1, -1, 1) * floor(dot(i4, vec4(.25, -.25, .25, .35))); vec3 v4 = b + vec3(0, 0, 1) + vec3(1, 1, -1) * floor(dot(i4, vec4(.25, .25, -.25, .35))); vec4 hashes = permute(mod(vec4(v1.x, v2.x, v3.x, v4.x), 289.0)); hashes = permute(mod(hashes + vec4(v1.y, v2.y, v3.y, v4.y), 289.0)); hashes = mod(permute(mod(hashes + vec4(v1.z, v2.z, v3.z, v4.z), 289.0)), 48.0); vec3 d1 = X - v1; vec3 d2 = X - v2; vec3 d3 = X - v3; vec3 d4 = X - v4; vec4 a = max(0.75 - vec4(dot(d1, d1), dot(d2, d2), dot(d3, d3), dot(d4, d4)), 0.0); vec4 aa = a * a; vec4 aaaa = aa * aa; vec3 g1 = grad(hashes.x); vec3 g2 = grad(hashes.y); vec3 g3 = grad(hashes.z); vec3 g4 = grad(hashes.w); vec4 extrapolations = vec4(dot(d1, g1), dot(d2, g2), dot(d3, g3), dot(d4, g4)); vec3 derivative = -8.0 * mat4x3(d1, d2, d3, d4) * (aa * a * extrapolations) + mat4x3(g1, g2, g3, g4) * aaaa; return vec4(derivative, dot(aaaa, extrapolations)); } vec4 bccNoiseDerivatives_XYBeforeZ(vec3 X) { mat3 orthonormalMap = mat3( 0.788675134594813, -0.211324865405187, -0.577350269189626, -0.211324865405187, 0.788675134594813, -0.577350269189626, 0.577350269189626, 0.577350269189626, 0.577350269189626); X = orthonormalMap * X; vec4 result = bccNoiseDerivativesPart(X) + bccNoiseDerivativesPart(X + 144.5); return vec4(result.xyz * orthonormalMap, result.w); }float ease (int easingFunc, float t) { return t; }vec3 blend (int blendMode, vec3 src, vec3 dst) { return 1. - (1. - src) * (1. - dst); }const float PI = 3.14159265359;vec4 normalizeNoise(vec4 noise, float amount) { return mix(noise, (noise + 0.5) * 0.5, amount); }mat2 rotate2d(float angle) { return mat2(cos(angle), -sin(angle), sin(angle), cos(angle)); }vec4 getNoise(vec3 p) { vec4 noise = bccNoiseDerivatives_XYBeforeZ(p); return normalizeNoise(noise, 0.0000); }void getCaustics(vec2 uv, out vec4 outNoise, out vec3 outColor) { vec2 aspect = vec2(uResolution.x/uResolution.y, 1);vec2 mPos = vec2(0.14372822299651566, 0.03765243902439008) + mix(vec2(0), (uMousePos-0.5), 0.0000); vec2 drift = vec2(0, 0.0000 * uTime * 0.0125); vec2 pos = vec2(0.14372822299651566, 0.03765243902439008) + drift * rotate2d(-0.0189 * -2. * PI); float mDist = ease(0, max(0.,1. - distance(uv * aspect, mPos * aspect) * 4. * (1. - 0.8100)));if(0 == 1) { mDist = max(0., (0.5 - mDist)); }uv -= pos; uv = uv * aspect * rotate2d(-0.0189 * 2. * PI) * vec2(1. - 0.0000, 1.) * 16.0 * 0.4460;float refraction = mix(0.25, 1.3, 0.9500);vec3 p = vec3(uv, uTime * 0.05); vec4 noise = getNoise(p); vec4 baseNoise = noise; vec4 balanceNoise = getNoise(p - vec3(baseNoise.xyz / 32.0) * refraction); noise = getNoise(p - vec3(balanceNoise.xyz / 16.0) * refraction);float balancer = (0.5 + 0.5 * balanceNoise.w); float normalized = pow(0.5 + 0.5 * noise.w, 2.); float value = mix(0., normalized + 0.2 * (1.0 - normalized), balancer * mDist); outNoise = baseNoise * mDist; outColor = vec3(0.4196078431372549, 0.8235294117647058, 1) * value; }out vec4 fragColor;void main() { vec2 uv = vTextureCoord; vec4 causticNoise; vec3 causticColor; getCaustics(uv, causticNoise, causticColor); vec4 color = texture(uTexture, uv + causticNoise.xy * 0.01 * 0.2500); if(4 > 0) { vec3 blended = blend(4, color.rgb, causticColor); color.rgb = mix(color.rgb, blended, 0.7400); } else { color.rgb = causticColor * 0.7400; } fragColor = color;}